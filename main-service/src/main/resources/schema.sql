DROP TABLE IF EXISTS USERS, CATEGORIES, COMPILATIONS, LOCATIONS, REQUESTS, EVENTS, COMPILATIONS_EVENTS, COMMENTS CASCADE;

CREATE TABLE IF NOT EXISTS USERS
(
    ID    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    NAME  VARCHAR(250)                                        NOT NULL,
    EMAIL VARCHAR(254) UNIQUE                                 NOT NULL
);

CREATE TABLE IF NOT EXISTS CATEGORIES
(
    ID   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    NAME VARCHAR(50) UNIQUE                                  NOT NULL
);

CREATE TABLE IF NOT EXISTS COMPILATIONS
(
    ID     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    PINNED BOOLEAN DEFAULT FALSE                               NOT NULL,
    TITLE  VARCHAR(50)                                         NOT NULL
);

CREATE TABLE IF NOT EXISTS LOCATIONS
(
    ID  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    LAT FLOAT                                               NOT NULL,
    LON FLOAT                                               NOT NULL
);

CREATE TABLE IF NOT EXISTS EVENTS
(
    ID                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    ANNOTATION         VARCHAR(2000)                                       NOT NULL,
    CATEGORY_ID        BIGINT                                              NOT NULL,
    CONFIRMED_REQUESTS INTEGER,
    CREATED_ON         TIMESTAMP                                           NOT NULL,
    DESCRIPTION        VARCHAR(7000)                                       NOT NULL,
    EVENT_DATE         TIMESTAMP                                           NOT NULL,
    INITIATOR_ID       BIGINT                                              NOT NULL,
    LOCATION_ID        BIGINT                                              NOT NULL,
    PAID               BOOLEAN                                             NOT NULL,
    PARTICIPANT_LIMIT  INTEGER DEFAULT 0,
    PUBLISHED_ON       TIMESTAMP,
    REQUEST_MODERATION BOOLEAN DEFAULT TRUE,
    STATE              VARCHAR(50)                                         NOT NULL,
    TITLE              VARCHAR(120)                                        NOT NULL,
    VIEWS              INTEGER DEFAULT 0
);

CREATE TABLE IF NOT EXISTS REQUESTS
(
    ID           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    CREATED      TIMESTAMP                                           NOT NULL,
    EVENT_ID     BIGINT                                              NOT NULL,
    REQUESTER_ID BIGINT                                              NOT NULL,
    STATUS       VARCHAR(10)                                         NOT NULL
);

CREATE TABLE IF NOT EXISTS COMPILATIONS_EVENTS
(
    COMPILATION_ID BIGINT,
    EVENT_ID       BIGINT,
    PRIMARY KEY (COMPILATION_ID, EVENT_ID)
);

CREATE TABLE IF NOT EXISTS COMMENTS
(
    ID         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    CREATED_ON TIMESTAMP WITHOUT TIME ZONE,
    EVENT_ID   BIGINT,
    AUTHOR_ID  BIGINT,
    TEXT       VARCHAR(2000)                                       NOT NULL
);

COMMENT ON TABLE USERS IS 'Пользователи';

COMMENT ON COLUMN USERS.NAME IS 'Имя';

COMMENT ON COLUMN USERS.EMAIL IS 'Почтовый адрес';

COMMENT ON TABLE CATEGORIES IS 'Категории событий';

COMMENT ON COLUMN CATEGORIES.NAME IS 'Название категории';

COMMENT ON TABLE COMPILATIONS IS 'Подборки событий';

COMMENT ON COLUMN COMPILATIONS.PINNED IS 'Закреплена ли подборка на главной странице сайта';

COMMENT ON COLUMN COMPILATIONS.TITLE IS 'Заголовок подборки';

COMMENT ON TABLE LOCATIONS IS 'Координаты мест событий';

COMMENT ON COLUMN LOCATIONS.LAT IS 'Широта';

COMMENT ON COLUMN LOCATIONS.LON IS 'Долгота';

COMMENT ON TABLE EVENTS IS 'События';

COMMENT ON COLUMN EVENTS.ANNOTATION IS 'Краткое описание';

COMMENT ON COLUMN EVENTS.CATEGORY_ID IS 'Id категории к которой относится событие';

COMMENT ON COLUMN EVENTS.CONFIRMED_REQUESTS IS 'Количество одобренных заявок на участие в данном событии';

COMMENT ON COLUMN EVENTS.CREATED_ON IS 'Дата и время создания события';

COMMENT ON COLUMN EVENTS.DESCRIPTION IS 'Полное описание события';

COMMENT ON COLUMN EVENTS.EVENT_DATE IS 'Дата и время на которые намечено событие';

COMMENT ON COLUMN EVENTS.INITIATOR_ID IS 'Id инициатора';

COMMENT ON COLUMN EVENTS.LOCATION_ID IS 'Id места проведения события';

COMMENT ON COLUMN EVENTS.PAID IS 'Нужно ли оплачивать участие';

COMMENT ON COLUMN EVENTS.PARTICIPANT_LIMIT IS 'Ограничение на количество участников. Значение 0 - означает отсутствие ограничения';

COMMENT ON COLUMN EVENTS.PUBLISHED_ON IS 'Дата и время публикации события';

COMMENT ON COLUMN EVENTS.REQUEST_MODERATION IS 'Нужна ли пре модерация заявок на участие';

COMMENT ON COLUMN EVENTS.STATE IS 'Список состояний жизненного цикла события';

COMMENT ON COLUMN EVENTS.TITLE IS 'Заголовок';

COMMENT ON COLUMN EVENTS.VIEWS IS 'Количество просмотров события';

COMMENT ON TABLE REQUESTS IS 'Запросы на участие в событиях';

COMMENT ON COLUMN REQUESTS.CREATED IS 'Дата и время создания заявки';

COMMENT ON COLUMN REQUESTS.EVENT_ID IS 'Идентификатор события';

COMMENT ON COLUMN REQUESTS.REQUESTER_ID IS 'Идентификатор пользователя, отправившего заявку';

COMMENT ON COLUMN REQUESTS.STATUS IS 'Статус заявки';

COMMENT ON TABLE COMPILATIONS_EVENTS IS 'Связь событий и подборок событий';

COMMENT ON COLUMN COMPILATIONS_EVENTS.COMPILATION_ID IS 'Идентификатор подборки событий';

COMMENT ON COLUMN COMPILATIONS_EVENTS.EVENT_ID IS 'Идентификатор события';

ALTER TABLE EVENTS
    ADD FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES (ID);

ALTER TABLE EVENTS
    ADD FOREIGN KEY (INITIATOR_ID) REFERENCES USERS (ID);

ALTER TABLE EVENTS
    ADD FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS (ID);

ALTER TABLE REQUESTS
    ADD FOREIGN KEY (EVENT_ID) REFERENCES EVENTS (ID);

ALTER TABLE REQUESTS
    ADD FOREIGN KEY (REQUESTER_ID) REFERENCES USERS (ID);

ALTER TABLE COMPILATIONS_EVENTS
    ADD FOREIGN KEY (COMPILATION_ID) REFERENCES COMPILATIONS (ID);

ALTER TABLE COMPILATIONS_EVENTS
    ADD FOREIGN KEY (EVENT_ID) REFERENCES EVENTS (ID);

ALTER TABLE COMMENTS
    ADD CONSTRAINT FK_EVENT_COMMENTS FOREIGN KEY (EVENT_ID) REFERENCES EVENTS (ID) ON DELETE CASCADE;

ALTER TABLE COMMENTS
    ADD CONSTRAINT FK_USER_COMMENTS FOREIGN KEY (EVENT_ID) REFERENCES USERS (ID) ON DELETE CASCADE;